:javascript
  $(function() {

    const generateUserSelect = (users) => {

      var userSelect = document.createElement('select');

      var placeholder = document.createElement('option');
      placeholder.text = 'Please select a receiver';
      placeholder.value = "";
      placeholder.placeholder = true;
      userSelect.appendChild(placeholder);

      users.forEach(function(user) {
        userSelect.options[userSelect.options.length] = new Option(
          user.email, 
          user.id
        )
      })
      
      return userSelect;
    }

    const cacheSelectedReceiver = (configsContainerId, receiverId) => {
      configs[configsContainerId][receiverId] = {receiverId: receiverId}
    }

    var configs = {}

    $('.configs').each(function() {
      var configsContainerId = $(this).data('configs-container-id');

      configs[configsContainerId] = {}

      $(this).children('[data-id]').each(function(i, ele) {
        cacheSelectedReceiver(configsContainerId, $(this).data('id'));
        //configs[configsContainerId][$(ele).data('id')] = {receiverId: $(ele).data('id')}
      })
    });

    /* Filtering out selected users */
    const removeSelectedReceiverOptions = (userSelect, currentConfigsContainerId) => {
      var $userSelect = $(userSelect);

      for(config of Object.values(configs[currentConfigsContainerId])) {
        var $option = $userSelect.children("option[value='" + config.receiverId + "']")
        if(!$option.is(':selected')) $option.remove();
      }

      return $userSelect;
    }
    
    $('form').on('click', '.add-btn', function() {
      var $that = $(this);
      var currentConfigsContainerId = $(this).closest('.configs').data('configs-container-id');
      
      $.get('/users')
        .then(generateUserSelect)
        .then((userSelect) => removeSelectedReceiverOptions(userSelect, currentConfigsContainerId))
        .then(function( $userSelect ) {
          $userSelect.insertBefore($that.closest('.row'));
          $userSelect.formSelect();

          $that.closest('.row').prev('.select-wrapper').wrap("<div class='row'></div>");
          return $userSelect;
        })
        .then(function($userSelect) {
          var previousSelectedVal = $userSelect.val();
          var previousSelectedText = $userSelect.find('option:selected').text();

          $userSelect.on('change', function() {
            var $that = $(this);
            // remove previous selected option from configs
            delete configs[currentConfigsContainerId][previousSelectedVal]

            // add new selected option to configs
            if($(this).val()) {
              cacheSelectedReceiver(currentConfigsContainerId, $(this).val())
              //configs[currentConfigsContainerId][$(this).val()] = {receiverId: $(this).val()};
            }

            var $siblingSelectWrappers = $userSelect.parents('.row:first').siblings('div.row').not('div.row:last');

            // update sibling select's options
            $siblingSelectWrappers.each(function() {
              var $newSelect = removeSelectedReceiverOptions($(this).find('select').get(0), currentConfigsContainerId);
              
              if(previousSelectedVal) {
                $newSelect.append(new Option(previousSelectedText, previousSelectedVal));
              }

              $(this).find('select').replaceWith($newSelect).formSelect();
            });

            previousSelectedVal = $(this).val();
            previousSelectedText = $(this).find('option:selected').text();
            console.log('configs: ', configs)
          })
        })
    });
  });
  

.container.content-holder
  .row
    .col.s12
      .row
        %h5.margin-top-0
          Outbound Event Settings

      - GoogleCalendar.all.each do |google_cal|
        %div.configs{'data-configs-container-id' => google_cal.id}
          %h6= google_cal.name
          - @outbound_event_config_form.configs_for(google_calendar: google_cal).each do |config|
            .row{'data-id': config.receiver.id}
              = config.receiver.email
          .row
            = form_with model: @outbound_event_config_form do |f|
              = f.hidden_field :google_calendar_id, value: google_cal.id
              -#
                - f.object.receiver_ids.each_index do |idx|
                  .row
                    = collection_select('', '', User.all, :id, :email, {include_blank: 'Select a receiver', selected: f.object.receiver_ids[idx]}, { name: 'outbound_event_config[receiver_ids][]', id: "outbound_event_config_form_#{google_cal.id}_receiver_id_#{idx}"})

              .row
                = f.submit 'Save', class: 'btn-small'
                %btn.btn-small.add-btn{:id => "add_btn_#{google_cal.id}"}
                  Add
