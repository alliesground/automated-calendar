:javascript
  $(function() {

    const generateUserSelect = (users) => {

      var userSelect = document.createElement('select');

      var placeholder = document.createElement('option');
      placeholder.text = 'Please select a receiver';
      placeholder.value = "";
      placeholder.placeholder = true;
      userSelect.appendChild(placeholder);

      users.forEach(function(user) {
        userSelect.options[userSelect.options.length] = new Option(
          user.email, 
          user.id
        )
      })
      
      return userSelect;
    }

    /* populating configured receivers */
    var allSelectedReceiverIds = {}

    $('.configs').each(function() {

      allSelectedReceiverIds[$(this).data('configs-container-id')] = $(this).children('[data-id]').map(function(i, ele) {
        return $(ele).data('id')
      })
      .get()
    });
    console.log(allSelectedReceiverIds);
    console.log('Entries: ', Object.entries(allSelectedReceiverIds))

    /* Filtering out selected users */
    const removeExistingReceiverOptions = (userSelect, currentConfigsContainerId) => {
      var $userSelect = $(userSelect);
      
      for([configsContainerId, selectedReceiverIds] of Object.entries(allSelectedReceiverIds)) {
        
        if(currentConfigsContainerId == configsContainerId) {

          selectedReceiverIds.forEach(function(selectedReceiverId) {
            var $option = $userSelect.children("option[value='" + selectedReceiverId + "']")

            $option.remove();
          })

          break;
        }
      }

      return $userSelect.get(0);
    }

    
    $('form').on('click', '.add-btn', function() {
      var $that = $(this);
      var currentConfigsContainerId = $(this).closest('.configs').data('configs-container-id');
      
      $.get('/users')
        .then(generateUserSelect)
        .then((data) => removeExistingReceiverOptions(data, currentConfigsContainerId))
        .then(function( userSelect ) {
          var $userSelect = $(userSelect)
          $userSelect.insertBefore($that.closest('.row'));
          $userSelect.formSelect();

          $that.closest('.row').prev('.select-wrapper').wrap("<div class='row'></div>");
        })

    });
  });
  

.container.content-holder
  .row
    .col.s12
      .row
        %h5.margin-top-0
          Outbound Event Settings

      - GoogleCalendar.all.each do |google_cal|
        %div.configs{'data-configs-container-id' => google_cal.id}
          %h6= google_cal.name
          - @outbound_event_config_form.configs_for(google_calendar: google_cal).each do |config|
            .row{'data-id': config.receiver.id}
              = config.receiver.email
          .row
            = form_with model: @outbound_event_config_form do |f|
              = f.hidden_field :google_calendar_id, value: google_cal.id
              -#
                - f.object.receiver_ids.each_index do |idx|
                  .row
                    = collection_select('', '', User.all, :id, :email, {include_blank: 'Select a receiver', selected: f.object.receiver_ids[idx]}, { name: 'outbound_event_config[receiver_ids][]', id: "outbound_event_config_form_#{google_cal.id}_receiver_id_#{idx}"})

              .row
                = f.submit 'Save', class: 'btn-small'
                %btn.btn-small.add-btn{:id => "add_btn_#{google_cal.id}"}
                  Add
